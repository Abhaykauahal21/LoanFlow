import React, { useState, useEffect } from 'react';
import axios from '../api/axios';
import { useAuth } from '../context/AuthContext';
import LoanCard from '../components/LoanCard';
import {
  LineChart, Line, AreaChart, Area,
  XAxis, YAxis, CartesianGrid,
  Tooltip, ResponsiveContainer, Legend
} from 'recharts';

const AnalyticsChart = ({ title, data, type = 'line', dataKey, xAxis = 'name' }) => {
  const ChartComponent = type === 'line' ? LineChart : AreaChart;
  const DataComponent = type === 'line' ? Line : Area;

  return (
    <div className="bg-white p-6 rounded-2xl shadow-sm border border-gray-200">
      <div className="flex justify-between items-center mb-6">
        <h3 className="font-semibold text-gray-900">{title}</h3>
        <select className="text-sm border border-gray-300 rounded-lg px-3 py-1 bg-gray-50">
          <option>Last 7 days</option>
          <option>Last 30 days</option>
          <option>Last 90 days</option>
        </select>
      </div>
      <div className="h-64">
        <ResponsiveContainer width="100%" height="100%">
          <ChartComponent
            data={data}
            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey={xAxis} />
            <YAxis />
            <Tooltip />
            <Legend />
            {Array.isArray(dataKey) ? (
              dataKey.map((key, index) => (
                <DataComponent
                  key={key}
                  type="monotone"
                  dataKey={key}
                  stroke={
                    index === 0 ? '#2563eb' :
                    index === 1 ? '#16a34a' :
                    '#7c3aed'
                  }
                  fill={
                    index === 0 ? '#3b82f610' :
                    index === 1 ? '#22c55e10' :
                    '#8b5cf610'
                  }
                  strokeWidth={2}
                />
              ))
            ) : (
              <DataComponent
                type="monotone"
                dataKey={dataKey}
                stroke="#2563eb"
                fill="#3b82f610"
                strokeWidth={2}
              />
            )}
          </ChartComponent>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

// Rest of your imports and component definitions...

const AdminDashboard = () => {
  const [loans, setLoans] = useState([]);
  const [stats, setStats] = useState(null);
  const [analytics, setAnalytics] = useState({
    trends: [],
    approvalRates: []
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [filter, setFilter] = useState('');
  const [search, setSearch] = useState('');
  const [activeTab, setActiveTab] = useState('overview');
  const { user, logout } = useAuth();

  useEffect(() => {
    fetchData();
  }, [filter, activeTab]);

  const fetchData = async () => {
    try {
      const [loansRes, statsRes, analyticsRes] = await Promise.all([
        axios.get(\`/admin/loans\${filter ? \`?status=\${filter}\` : ''}\${search ? \`&search=\${search}\` : ''}\`),
        axios.get('/admin/stats'),
        axios.get('/admin/analytics')
      ]);
      
      setLoans(loansRes.data);
      setStats(statsRes.data);
      
      // Process analytics data
      const last7Days = Array.from({ length: 7 }, (_, i) => {
        const d = new Date();
        d.setDate(d.getDate() - i);
        return d.toLocaleDateString('en-US', { weekday: 'short' });
      }).reverse();

      // Mock data for demonstration - replace with actual data from analyticsRes
      const mockTrends = last7Days.map(day => ({
        name: day,
        applications: Math.floor(Math.random() * 20) + 5,
        approved: Math.floor(Math.random() * 15) + 3,
        rejected: Math.floor(Math.random() * 8)
      }));

      const mockApprovalRates = last7Days.map(day => ({
        name: day,
        rate: Math.floor(Math.random() * 40) + 60
      }));

      setAnalytics({
        trends: mockTrends,
        approvalRates: mockApprovalRates
      });
    } catch (err) {
      setError('Failed to fetch data');
    } finally {
      setLoading(false);
    }
  };

  // ... rest of your existing code ...

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Keep your existing header/nav code */}
      <nav className="bg-white shadow-sm border-b border-gray-200">
        {/* ... existing nav code ... */}
      </nav>

      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* ... your existing welcome section and error handling ... */}

        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {/* ... your existing StatCard components ... */}
        </div>

        {/* Analytics Charts */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          <AnalyticsChart
            title="Loan Applications Trend"
            data={analytics.trends}
            type="line"
            dataKey={['applications', 'approved', 'rejected']}
          />
          <AnalyticsChart
            title="Approval Rate Analytics"
            data={analytics.approvalRates}
            type="area"
            dataKey="rate"
          />
        </div>

        {/* ... rest of your existing code ... */}
      </div>
    </div>
  );
};

export default AdminDashboard;